import random
import time
import datetime
from playsound import playsound


# This function asks user how many chapters that they want to review
def single_chapter():
    qlst = {}
    chap = int(input(f"What chapter are you covering?: "))
    sval = int(input(f"How many questions are in the chapter {chap}: "))
    qlst[chap] = sval
    return qlst


# This function ask the user the amount of chapters that they want to review
def multiple_chapters(num1, num2):
    num_lst = {}
    
    # This for loop uses the numbers that the user input and places them into a dictionary
    for key in range(num1, (num2 + 1)):
        value = int(input(f"How many questions are in the chapter {key}: "))
        num_lst[key] = value
    key += 1
    return num_lst


# This function uses the dictionary created and randomly generates a quiz based how many questions user wants
def generate_quiz(dict, sum=0):
    # This just gathers the total number of questions possible
    a = list(dict.values())
    for value in a:
        sum += value

    temp_lst = []
    no_repeat = []
    quiz_question_num = int(input("\nHow many questions do you want to make?: \n"))

    # This loop just checks to make sure the user doesn't break the program by making it try to make more questions than available.
    while quiz_question_num > sum:
        print("\nENTERED MORE QUESTIONS THAN AVAILABLE")
        print("PLEASE ENTER LESS QUESTIONS")
        quiz_question_num = int(input("\nHow many questions do you want to make?: \n"))

    else:
        for question in range(1, (quiz_question_num + 1)):  # The +1 is to make the range inclusive so it grabs all the questions
            while len(no_repeat) != quiz_question_num:  # This make sure there are th apropriate questions generated by the program
                random_dict_choice = random.choice(list(dict.items()))  # This converts the dictionary into a list of tuples which then is randomized 
                random_question = random.choice(range(1, (random_dict_choice[1] + 1)))  # This uses the value from the converted dictionary to give the program a range to choose a random question
                temp_lst.append(tuple([random_dict_choice[0], random_question]))
                [no_repeat.append(i) for i in temp_lst if i not in no_repeat]  # This will only add unique tuples to the list
        return no_repeat #list of tuples


# This function pulls the index of the tuples to display the questions generated
def display_questions(tlist, counter=1):
    for i, tuple in enumerate(tlist):
        el1 = tuple[0]
        el2 = tuple[1]
        print(f'Question #{counter}: Chapter {el1} Problem {el2}')
        counter += 1


# A very simple timer function that allows the test to be timed
def timer(h,m,s):
    total_seconds = h * 3600 + m * 60 + s
    while total_seconds > 0:
        timer = datetime.timedelta(seconds = total_seconds)
        print(timer, end="\r")
        time.sleep(1)
        total_seconds -= 1
    playsound("Timer.mp3")  # Make sure the version of playsound is 1.2.2 (IT BREAKS IF IT IS NOT)


def main():
    question = input("Do you want to review multiple chapters? (y/n): ").lower()
    if question == 'n':
        a = single_chapter()
        display_questions(generate_quiz(a))
    
    elif question == 'y':
        start_queston_num = int(input("\nEnter starting chapter: "))
        end_question_num = int(input("Enter ending chapter: "))
        chapters = multiple_chapters(start_queston_num, end_question_num)
        display_questions(generate_quiz(chapters))
    
    else:
        print("Enter a valid choice")
        main()


if __name__ == "__main__":
    while True:
        main()
        tchoice = input("\nDo you want to add a timer? [y/n]: ").lower()
        if tchoice == 'y':
            h = int(input("How many hours in your time?: "))
            m = int(input("How many minutes in your time?: "))
            s = int(input("How may seconds in your time?: "))
            timer(h, m, s)
        
        option = input("\nDo you want to generate another quiz? [y/n]: \n").lower()
        if option == 'y':
            continue
        
        elif option == 'n':
            break

    print("Goodbye")
    input("Press any button to exit")

#TODO Add a way for the user to enter their own questions so it's a bit more personalized 
#TODO Add a gui
